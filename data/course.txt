**День 1: Основи синтаксису Python**
- Почніть з ознайомлення з інтерпретатором Python. Дізнайтеся, як вводити команди та отримувати результати. Потім вивчіть базовий синтаксис, включаючи коментарі, ідентифікатори, ключові слова та оператор присвоювання.
- Вивчіть типи даних у Python, такі як цілі числа, числа з плаваючою комою, рядки, списки, кортежі та словники. Зрозумійте, як створювати змінні та працювати з цими типами даних.
- Дізнайтеся про оператори арифметичних дій, порівняння та логічні оператори в Python.

Практика:
- Яке значення буде надруковано після виконання цього коду: `a = 10 + 5 * 2 / 2`?
   а) 15
   б) 11
   в) 10

- Який тип даних буде у змінної після виконання цього коду: `my_string = "Hello, Python!"`?
   а) ціле число
   б) рядок
   в) логічний

- Яке значення логічного виразу `5 > 2 and 3 == 5`?
   а) True
   б) False

---

**День 2: Контроль потоку та функції**
- Вивчіть структури контролю потоку в Python: умовні оператори (if, elif, else) та цикли (for і while). Зрозумійте, як використовувати їх для керування виконанням коду.
- Дізнайтеся, як визначати функції в Python, включаючи передачу аргументів і повернення значень. Розгляньте поняття областей видимості та рекурсії.

Практика:
- Яке значення буде надруковано після виконання цього коду:

    ```python
    x = 10
    if x > 5:
        print("Більше 5")
    else:
        print("Не більше 5")
    ```

   а) Більше 5
   б) Не більше 5
   в) Нічого не буде надруковано

- Яке значення буде повернуто функцією після виконання цього коду:

    ```python
    def add_numbers(a, b):
        return a + b
    
    result = add_numbers(3, 4)
    ```

   а) 7
   б) 3
   в) 4

---

**День 3: Модулі та обробка помилок**
- Дізнайтеся, як імпортувати та використовувати модулі в Python. Розгляньте стандартну бібліотеку Python і як імпортувати функції та класи з них.
- Вивчіть обробку винятків у Python. Дізнайтеся, як перехоплювати та обробляти помилки за допомогою блоків try-except, а також як генерувати власні виключення.

Практика:
- Який модуль потрібно імпортувати, щоб використовувати функцію `sqrt`, яка обчислює квадратний корінь числа?
   а) math
   б) cmath
   в) random

- Яке значення буде надруковано після виконання цього коду:

    ```python
    try:
        x = 10 / 0
    except ZeroDivisionError:
        print("Не можна ділити на нуль")
    ```

   а) 10
   б) Не можна ділити на нуль
   в) Буде згенеровано помилку

---

**День 4: Робота з файлами та списками**
- Вивчіть, як працювати з файлами в Python. Дізнайтеся, як читати та записувати дані в текстові та бінарні файли.
- Поглиблено розгляньте списки в Python. Дізнайтеся про методи списків, такі як append, insert, remove, sort, а також про слайсинг і розуміння списків списків.

Практика:
- Яке значення буде надруковано після виконання цього коду:

    ```python
    my_list = [1, 2, 3, 4, 5]
    my_list.append(6)
    print(my_list)
    ```

   а) [1, 2, 3, 4, 5, 6]
   б) [1, 6, 2, 3, 4, 5]
   в) [1, 2, 3, 4, 5]

- Яке значення буде надруковано після виконання цього коду:

    ```python
    with open("test.txt", "w") as file:
        file.write("Це тестовий текст")
    ```

   а) Це тестовий текст
   б) Нічого не буде надруковано
   в) Буде згенеровано помилку

---

**День 5: Класи та об'єктно-орієнтоване програмування (ООП)**
- Ознайомтеся з основами ООП в Python. Вивчіть, як створювати класи, визначати методи та атрибути, а також розуміти концепції інкапсулювання, успадкування та поліморфізму.
- Дізнайтеся, як використовувати вбудовані класи Python, такі як dict, set, tuple, і як створювати власні класи.

Практика:
- Яке значення буде надруковано після виконання цього коду:

    ```python
    class MyClass:
        def __init__(self, value):
            self.value = value
    
    obj = MyClass(10)
    print(obj.value)
    ```

   а) 10
   б) MyClass
   в) Буде згенеровано помилку

- Який метод класу використовується для ініціалізації об'єкта?
   а) init
   б) create
   в) new